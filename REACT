'''
The code below is the result of practice problems in Data Camp for LLM Agentic Design -- learning Agents and REACT 
'''
# Create the agent
app = create_react_agent(model=model, tools=[count_r_in_word])

# Create a query
query = "How many r's are in the word 'Terrarium'?"

# Invoke the agent and store the response
response = app.invoke({"messages": [("human", query)]})

# Print the agent's response
print(response['messages'][-1].content)
'''
For the Above problem, tool, ChatOpenAI, create_react_agent, math, and model were loaded already asd well as the tool "count_r_in_word"
'''
# Define this math function as a tool
@tool
def hypotenuse_length(input: str) -> float:
    """Calculates the length of the hypotenuse of a right-angled triangle given the lengths of the other two sides."""
    
    # Split the input string to get the lengths of the triangle
    sides = input.split(',')
    
    # Convert the input values to floats, removing extra spaces
    a = float(sides[0].strip())
    b = float(sides[1].strip())
    
    # Square each of the values, add them together, and find the square root 
    return math.sqrt(a**2 + b**2)
'''
In the above example, we created a simple tool for agents to use that takes an input txt string, splits the gathered numbers from the string, converts to a float, then performs
the calculation on them
'''
# Create a list variable and pass in your tool
tools = [hypotenuse_length]

# Create a query using natural language
query = "What is the hypotenuse length of a triangle with side lengths of 10 and 12?"

# Pass in the hypotenuse length tool and create the agent
app = create_react_agent(model, tools)

# Invoke the agent and print the response
response = app.invoke({"messages": [("human", query)]})
print(response['messages'][-1].content)
'''
Above we then call the tool we created and pass an example into the agent
'''
message_history = response["messages"]
new_query = "What about one with sides 12 and 14?"

# Invoke the app with the full message history
response = app.invoke({"messages": message_history + [("human", new_query)]})

# Extract the human and AI messages from the result
filtered_messages = [msg for msg in response["messages"] if isinstance(msg, (HumanMessage, AIMessage)) and msg.content.strip()]

# Pass the new query as input and print the final outputs
print({
    "user_input": new_query,
    "agent_output": [f"{msg.__class__.__name__}: {msg.content}" for msg in filtered_messages]
})
'''
Above we include message history
'''
